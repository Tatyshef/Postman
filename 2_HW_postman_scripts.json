{
	"info": {
		"_postman_id": "5c4010be-3b13-49d9-a28f-8b4662eff73e",
		"name": "2_HW_postman_scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200:\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string:\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tatyana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "77000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3.Cпарсить  response body в json:\r",
							"var jsonData = pm.response.json ();\r",
							"console.log(\"jsonData =\", jsonData);\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.):\r",
							"pm.test(\"Your name is Tatyana\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Tatyana\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.):\r",
							"pm.test(\"Your age is 33\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.):\r",
							"pm.test(\"Your salary is 77000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(77000);\r",
							"});\r",
							"// 7. Спарсить request: (метод post)\r",
							"var req = request.data;\r",
							"console.log('req =', req);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.):\r",
							"var req_name = req.name;\r",
							"console.log('req_name =', req_name);\r",
							"\r",
							"pm.test(\"Test_2 name is Tatyana\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.):\r",
							"var req_age = req.age;\r",
							"console.log(\"req_age =\", req_age)\r",
							"\r",
							"pm.test(\"Your age_2 is 33\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.):\r",
							"var req_salary = req.salary;\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"\r",
							"pm.test(\"Your salary_2 is 77000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req_salary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response:\r",
							"var resp_family = jsonData.family\r",
							"console.log(\"resp_family =\", resp_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
							"var req_salary = req.salary;\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"\r",
							"var resp_salary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"console.log(\"resp_salary_1_5 =\", resp_salary_1_5);\r",
							"pm.test('u_salary_1_5_year is salary*4', function () {\r",
							"    pm.expect(resp_salary_1_5).to.eql(+req_salary*4);\r",
							"} );\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tatyana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "77000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json:\r",
							"var resp = pm.response.json ();\r",
							"console.log('resp =', resp)\r",
							"// 4. Спарсить request:\r",
							"var req = pm.request.url.query.toObject ();\r",
							"console.log('req =', req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name; \r",
							"console.log(req_name);\r",
							"let resp_name = resp.name;\r",
							"console.log('resp_name =',  resp_name)\r",
							"\r",
							"pm.test(\"Name is Tatyana\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.):\r",
							"let req_age = req.age;\r",
							"let resp_age = resp.age;\r",
							"console.log(\"req_age =\", req_age);\r",
							"console.log(\"resp_age =\", resp_age);\r",
							"\r",
							"pm.test(\"Your age is 33\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = resp.salary;\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"console.log(\"resp_salary =\", resp_salary);\r",
							"// приведу строку к числу с помощью +\r",
							"pm.test(\"Your salary is 75000\", function () {\r",
							"    pm.expect(+req_salary).to.eql(resp_salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let resp_family = resp.family;\r",
							"console.log(\"resp_family =\", resp_family);\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"let resp_dog = resp.family.pets.dog;\r",
							"console.log(\"resp_dog =\", resp_dog);\r",
							"\r",
							"pm.test('Params dog Have name', function() {\r",
							"  pm.expect(resp_dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age:\r",
							"\r",
							"pm.test('Params dog have age', function () {\r",
							"    pm.expect(resp_dog).to.have.property('age');\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky:\r",
							"let nameDog = resp.family.pets.dog.name;\r",
							"console.log('nameDog =', nameDog);\r",
							"\r",
							"pm.test(\"nameDog is Luky\", function () {\r",
							"    pm.expect(nameDog).to.eql(\"Luky\");\r",
							" });\r",
							"//  12. Проверить, что параметр age имеет значение 4:\r",
							"let dog_age = resp_dog.age;\r",
							"console.log('dog_age =', dog_age);\r",
							"\r",
							"pm.test(\"Age is 4\", function () {\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tatyana",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "33",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "70000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Tatyana&age=33&salary=75000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tatyana"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "75000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json ();\r",
							"console.log('resp =', resp);\r",
							"// 4. Спарсить request:\r",
							"let req = pm.request.url.query.toObject ();\r",
							"console.log('req =', req);\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"console.log(\"req_name =\", req_name);\r",
							"pm.test(\"Name is Tatyana\", function () {\r",
							"    pm.expect(resp.name).to.eql(req_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"console.log(\"req_age =\", req_age);\r",
							"\r",
							"pm.test(\"Age is 33\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req_age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = req.salary;\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = resp.salary;\r",
							"console.log(\"resp_salary =\", resp_salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_0 = resp_salary[0];\r",
							"console.log('salary_0 =', salary_0);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_1 = resp_salary[1];\r",
							"console.log('salary_1 =', salary_1);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_2 = resp_salary[2];\r",
							"console.log('salary_2 =', salary_2);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\" From resp. salary_0 eql req_salary\", function () {\r",
							"    pm.expect(salary_0).to.eql(+req_salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\" From resp. salary_0 eql req_salary\", function () {\r",
							"    pm.expect(+salary_1).to.eql(+req_salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"From resp. salary_2 eql req_salary*3\", function () {\r",
							"     pm.expect(+salary_2).to.eql(+req_salary*3);\r",
							" });\r",
							"//  15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary.\r",
							"// 18. Передать в окружение переменную name:\r",
							"\r",
							"\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"// 19. Передать в окружение переменную age:\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"// 20. Передать в окружение переменную salary:\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. (надо изучить цикл)\r",
							"// выше уже вытаскивала salary:  let resp_salary = resp.salary;\r",
							"\r",
							"console.log('length_salary =', resp_salary.length);\r",
							"\r",
							"for (let cicl = 0; cicl < resp_salary.length; cicl++) {\r",
							"    console.log(\"Item_salary =\", resp_salary[cicl]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Tatyana&age=33&salary=77000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tatyana"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "77000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request (прописала через {{salary}} в body, form-data)\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// (прописала через {{age}} в body, form-data)\r",
							"// 3. Вставить параметр name из окружения в name:\r",
							"// (прописала через name в body, form-data)\r",
							"// 4. Отправить запрос\r",
							"// 5. Статус код 200:\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json:\r",
							"var resp = pm.response.json();\r",
							"console.log('resp =', resp);\r",
							"// 7. Спарсить request:\r",
							"var req = request.data;\r",
							"console.log('req = ', req);\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary:\r",
							"pm.test('Response has start_qa_salary', function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
							"pm.test('Response has qa_salary_after_6_months', function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
							" pm.test('Response has qa_salary_after_12_months', function () {\r",
							"     pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							" });\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
							"pm.test('Response has qa_salary_after_1.5_year', function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
							"pm.test('Response has qa_salary_after_3.5_years', function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person:\r",
							"pm.test('Response has person', function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.):\r",
							"var req_salary = req.salary;\r",
							"console.log('req_salary =', req_salary);\r",
							"\r",
							"var resp_start_qa_salary = resp.start_qa_salary;\r",
							"console.log('resp_start_qa_salary =', resp_start_qa_salary)\r",
							"pm.test('Start_qa_salary equel salary from request', function () {\r",
							"    pm.expect(resp_start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_6_months equel salary*2', function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req_salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.):\r",
							"pm.test('qa_salary_after_12_months equel salary*2.7', function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req_salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.):\r",
							"pm.test('qa_salary_after_1.5_year equel salary*3.3', function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(+req_salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.):\r",
							"pm.test('qa_salary_after_3.5_years equel salary*3.8', function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(+req_salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.):\r",
							"var u_name_1 = resp.person.u_name[1];\r",
							"console.log(\"u_name_1 =\", u_name_1);\r",
							"\r",
							"pm.test('u_name 1 equel salary из request', function () {\r",
							"    pm.expect(u_name_1).to.eql(+req_salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.):\r",
							"var req_age = req.age;\r",
							"console.log (\"req_age =\", req_age);\r",
							"var resp_u_age = resp.person.u_age;\r",
							"console.log(\"resp_u_age =\", resp_u_age);\r",
							"\r",
							"pm.test('u_age equel age from request', function () {\r",
							"    pm.expect(resp_u_age).to.eql(+req_age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.):\r",
							"pm.test('u_salary_5_years equel salary*4.2', function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req_salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person. (надо изучить цикл)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}